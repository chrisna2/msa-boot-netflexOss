spring.application.name=BnkApiGateway
## 실제 사용자가 화면에서 만나는 주소는 localhost:9999
## 즉 실제 사이트 사용자들이 이용하는 포트는 여기서 결정 되는 셈
server.port=9999

# 1. zuul 설정 
zuul.ribbon-isolation-strategy=THREAD
zuul.thread-pool.use-separate-thread-pools=true
# zuul의 라우팅 목록 중 아래 정의된 서비스들을 제외하고는모두 무시한다* 즉 라우팅이 아래에 정의 된 목록만 진행된다.
zuul.ignored-services=*
# Zuul에 의해 routing 되는 모든 service의 Endpoint를 /bnk/~ 로 묶는다.
# [예] /harang => /bnk/harang
# zuul.prefix=/bnk

# 3. ribbon 설정
# 라우팅 : bnkClient01 : harang 서비스 정보
zuul.routes.harang.path=/harang/**
zuul.routes.harang.service-id=harang
# true인 경우 path를 제거 후 각 서비스에 포워딩
      # true : 컨트롤러에 해당 하는 서비스 아이디를 입력하지도 된다.
      # false : 컨트롤러에 해당 하는 서비스 아이디를 입력해야 된다.
zuul.routes.harang.strip-prefix=true

harang.ribbon.eureka.enabled=true
harang.ribbon.NIWSServerListClassName=com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
harang.ribbon.ConnectTimeout=5000
harang.ribbon.ReadTimeout=5000
harang.ribbon.MaxTotalHttpConnections=500
harang.ribbon.MaxConnectionsPerHost=100

# 라우팅 : bnkClient02 : concept 서비스 정보
zuul.routes.concept.path=/concept/**
zuul.routes.concept.service-id=concept
# true인 경우 path를 제거 후 각 서비스에 포워딩
      # true : 컨트롤러에 해당 하는 서비스 아이디를 입력하지도 된다.
      # false : 컨트롤러에 해당 하는 서비스 아이디를 입력해야 된다.
zuul.routes.concept.strip-prefix=true

concept.ribbon.eureka.enabled=true
concept.ribbon.NIWSServerListClassName=com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
concept.ribbon.ConnectTimeout=5000
concept.ribbon.ReadTimeout=5000
concept.ribbon.MaxTotalHttpConnections=500
concept.ribbon.MaxConnectionsPerHost=100


# 2. hystrix 설정
hystrix.command.harang.execution.isolation,strategy=THREAD
hystrix.command.harang.execution.isolation,thread.timeoutInMilliseconds=20000
hystrix.command.concept.execution.isolation,strategy=THREAD
hystrix.command.concept.execution.isolation,thread.timeoutInMilliseconds=20000

# 4. Eureka 서비스 설정
# 유레카 레지스트리 서버 주소 : 이걸 등록을 해주어야 해당 클라이언트 API가 유레카레지스트리 서버에 등록이된다.
eureka.client.service-url.defaultZone=http://localhost:8080/eureka/
# 클라이언트 서버 상태 체크 기능
eureka.client.healthcheck.enabled=true
# client 서비스가 eureka 서버로 부터 서비스 리스트 정보를 local에 caching 할지 여부
eureka.client.fetch-registry=true
# 접속정보 ID 생성 (?)
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
# 영문 웹 주소보다 IP Adress가 먼저 유선 할지 여부
eureka.instance.preferIpAddress: true

management.endpoints.web.exposure.include=*