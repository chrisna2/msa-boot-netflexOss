#### Application Setting ########
# 추후에 Eureka Client가 Eureka Server에 자신을 등록할 때 application.name으로 등록됨
spring.application.name=BnkSever
server.port=8080

#### Eureka Config ##############################################

# 1. 기본설정 : Eureka Server를 standalone하게 활용하는 방법 
# 공통 사이트 주소, ip 정보 설정
eureka.instance.hostname=localhost
# Eureka Registry Server임을 선언 : 해당 서버의 주소정보로 각각의 MSA정보가 포트별로 정리되어 관리된다.
# Registry Server를 설정할때 가장 중요한 점은 cluster 로 구성을 해야한다.
# 그 이유는 Registry Server가 죽으면 마이크로 서비스가 연결이 아예 안되기 때문이다.
# eureka 로 cluster 를 하기 가장 쉬운 방법은 eureka server를 여러대 띄운 후,
# 각 마이크로 서비스의 eureka 설정에서 아래와 같이 주소를 여러개 나열하는 방법이다.
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka,http://${eureka.instance.hostname}:8081/eureka
# 본인 서비스를 eureka 서버에 등록 할지 여부.(eureka는 서버이면서 client가 될 수도 있음)
# Eureka Server 동작과 Peer Server간 Communication : 생략 (Standalone 구조로 단일 서버 사용하기 때문)
eureka.client.register-with-eureka=false
# client 서비스가 eureka 서버로 부터 서비스 리스트 정보를 local에 caching 할지 여부
eureka.client.fetch-registry=false
# 서버 자기 보존 기능 여부 : Registry Server가 죽지 않게 서버 자원을 관리하는 기능으로 추정
eureka.server.enable-self-preservation=true
# 기본 설정 끝 #######################################################


# 2. 기타 설정
# 클라이언트의 서버 상태를 체크함
eureka.client.healthcheck.enabled=true

